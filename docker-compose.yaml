volumes:
  pgdatasource:

services:
  pg-docker:
    image: postgres
    container_name: pg-docker
    restart: always
    environment:
      - DATABASE_HOST=127.0.0.1
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT=5432
      - POSTGRES_DB=project
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdatasource:/var/lib/postgresql/data

    # to access the database via command line use command
    # docker exec -it pg-docker bash
    # psql -U postgres
    # \c project

  project-api:
    build: api/
    container_name: project-api
    # restart: always
    depends_on:
      pg-docker:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=pg-docker
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT=5432
      - POSTGRES_DB=project
    volumes:
      - type: bind
        source: ./api
        target: /api

  project-ui:
    build: ui/
    tty: true
    container_name: project-ui
    environment:
      - FAST_REFRESH=false
    depends_on:
      - "project-api"
    ports:
      - "3000:3000"
    networks:
      - app-network

    # Uncomment for hot reload
    volumes:
      - type: bind
        source: ./ui
        target: /app
      - /app/node_modules

networks:
  app-network:
    driver: bridge
